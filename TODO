Improvments:
  ☐ remove objectAssign and use rest object
  ☐ status feild, initialised, started, paused etc...
  Build Options:
    ☐ Add option to start countdown timer in the future
      allowing the use of a time in the future, so a countdown timer can be configured 
      to run everyday. 
    ☐ Have an option in changeOptions to set originalDate to null if future date is set to false after timr created
    ✔ Need to merge existing formatValues object with old one, as well as providing defaults.
    ✔ add option futureDate, that specifes the date date/time should be run through dateToSeconds, rather than timeToSeconds. 
  Create Store:
    ✔ creatStore, provide the same errors (that add provides) if timr exists in another store when creating it
    ✔ createStore, timr instanceof Time necassary? It's already hcecked before adding to the array.
      Instanceof check required as it's exposed as a store method.
  Date To Seconds:
    ☐ comment epic regex in dateToSeconds @enhancement 
    ✔ fix up dateToSeconds returning originalDate as it is unecassary, only called from setStartTime and that has access ot the original startTime it's also somewhat confusing as it sometimes returns a number and sometimes and object
  Format Time:
    ☐ add third argument to format time (boolean - buildOptions)
      ✔ have toBuild set to true by default @done(18-11-22 11:09)
      ✔ if options don't exist, build regardless. @done(18-11-22 11:09)
        ☐ have a warning if options is null but toBuild is false?
      ☐ Update code in Timr and add unit test to ensure it works
      ☐ check makeup of options when toBuild is set to false require atleast:
        ☐ generalise validation in buildOptions?
        ☐ formatOuput: String
        ☐ formatValues: array of functions (function argument is only valid in buildOPtions)
      specifies with to us the buildOptions function or not. 
      Defaults to true, set to false in Time - formatTime so that it doesn't 
      rerun buildoptions on every call to ticker
    ☐ Provide a mechanism to pluralise words, e.g 1 day vs 2 days @feature
    ☐ Add weeks months and years? Weeks = days / 7, days would be days % 7 @feature 
    ☐ refactor protected values
    ☐ remove restriction on protected values @enhancement
      THIS WON'T WORK IF I WANT TO KEEP THE SAME IMPLEMENTATION
      make it so that you can list the DD,HH etc.. in any order and the protected 
      value would just work. 
    ✔ have formatTime utilise modulo and less math.floor nestings and no need for ternarys.
      See code wars challenge: Human Readable time 4kyu
    ✔ Raw should just return the raw values
    ✔ provide zeroPad as an export.
    ✔ write tests
    ✔ Comment formatTime a bit better and include exmaples of what the code is doing.
    ✔ use HH,MM etc in raw output to match the format string and make life easier
    ✔ update formatTime to use new method of replacing the values (listed in a comment) also refactor so its nicer looking
    ✔ Also remove padRaw option and include an option to pass a function or an object. The function will be applied to all time values where as the object gives the use the opportunity to configure individual values. These functions will be applied in the format string.
    ✔ Test for a function and that it returns a value which is of type number or string in buildOptions.
  Index:
    ☐ provide a date object to starttime
    ☐ Remove public exports for anything other then create and createStore?
    ✔ provide ability to pass an object with startTime in it as the first argument.
    ✔ Proper ES6 exports, rather than weird object assign: export default Timr; export { createStore, formatTime etc... }
    ✔ change api to create, than default won't be necassary(importing with require in commonjs enviroment): 
      export {
        create
        createStore
        ...
      }
      import { create } from Timr;
      Timr.create();
  Time To Seconds:
    ✔ have sepearte code to convert 25h/m into 25:00/25:00:00 before validate runs. thus making validate more self contained
    ✔ figure out how the validateStartTime method is displaying the correct type for the NaN, null Infinity test and make it better / comment it 
    ✔ move timeToSeconds out of validateStartTime and have validate just validate / move the validation into timeToSeconds as dateToSeconds has it's own validation and its slightly confusing.
  EventEmitter:
    ✔ Use Class syntax @done(21-03-26 15:53)
  Timr:
    ✔ Use Class syntax @done(21-03-26 15:53)
    ☐ force countdown to true if futureDate also set to true. @enhancement 
    ☐ Pass function to start when running @feature
      Provide an option to pass a function that runs 
      when start is called when the timer is already running, thus providing
      and easy hook to deal with that situation, otherwise just does nothing currently.
    ☐ re-write future dates slightly to be slightly more forgiving than erroring @enhancement 
    ☐ if future date used, use more appropriate formatOutput @enhancement 
      Allowing people to set and forget it.
      allow user to provide a function to fire if a date becomes in the past they can handle it, 
      if no function is provided throw an error / console warn and set startTime to 0.
      try {
        fn(time)
      } catch {
        throw new Error('Date in the past');
      }
    ✔ remove the ability for 0 to setup a stopwatch. 
      Error if countdown: false hasn't been set and 0 is specified as the starttime, 
      to make it more clear and less presumptious. 
      Have the error check in start, so that changeOptions and setStartTime 
      don't have to do the checks.
      ☐ need to make ammendments if futureDate is set, to avoid erroring incorrectly.
        ☐ perhaps just execute finish if future date and countdown
        ☐ remove error from dateToSeconds for times less than 0?
        ☐ need to distinguish between when someone is creating it (throw err so they don't set an incorrect date) and when its in production
    ✔ check for a number on delay argument in start
    ✔ rename originalDate to furtureDate
    ✔ setStartTime comments are a bit confusing, clear them up a bit.
    ✔ check for falsy values (except 0) in setStartTime and throw an error requiring a startTime.
  Validate:
    ☐ Remove explicit function for isNot and create an object that auto creates isNots for all of the is... fns
    ✔ Write external typeof testers and isFunction etc.
      ✔ Do tests
      ✔ write comments

Tests:
  ☐ use jest snapshot feature and replace majority of manual assertions (That make sense to replace)
  ☐ clean up tests @enhancement 
    ☐ espeically Timr. Where some testing is duplicated
      e.g. changeOptions / setStartime, only have 1 test to make sure 
      it works in that context.
  ☐ karma for different browsers @feature
  ☐ Test issue that required pull request @fix
  ✔ Moved from mocha to jest
  ✘ Change Timr definition to class for es6 goodness?
    Babel adds too much unecassary overhead to class transpiling to make this worthwhile

Build:
  ✔ setup a build pipeline with travis @done(18-11-13 13:38)
    ✔ builds and test @done(18-11-13 13:38)
    ✔ when a new version is merged to master, publish to npm @done(18-11-13 13:38)
  ✘ prettier? @feature @cancelled(18-11-13 15:03)
  ☐ Add typescript support @feature   
  ☐ move all build to weebpack with multi config return
  ☐ typescript export type defs
  ✔ Update package versions @enhancement @started(18-11-09 15:38) @done(18-11-12 13:29) @lasted(2d21h51m28s)
  ✔ check travis build as it's currently erroring @fix @done(18-11-13 13:49)
  ✔ remove dependency on object-assign? maybe use a polyfill from babel? @enhancement @done(18-11-12 12:17)
  ✔ switched from eslint / airbnb to JS standard style 
  ✔ Upgraded to webpack 3.2 for ModuleConcatenationPlugin

README:
  ☐ Update store doc example to use `store` instead of `Timr`
  ☐ Update Utilites for exposed apis / update whole readme to reflect new API
  ☐ provide examples of using timeToSeconds in start delay
  ☐ provide dateToSeconds as an export as well allowing to delay the timer until a specific date.
  ☐ No need to comment about 2 year assumption, just set futureDate and you're golden.
  ☐ fix error in readme, getRaw() shorthand: formatTime().raw; also read through readme and try and clean it up a bit.

Archive:
